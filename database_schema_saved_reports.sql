-- Database schema for saving weekly duty report analyses and staff recognition reports
-- This extends the existing schema to provide permanent storage for these reports

-- Table for saved weekly duty report analyses
CREATE TABLE IF NOT EXISTS saved_duty_analyses (
    id BIGSERIAL PRIMARY KEY,
    week_ending_date DATE NOT NULL,
    report_type TEXT NOT NULL, -- 'weekly_summary' or 'standard_analysis'
    date_range_start DATE NOT NULL,
    date_range_end DATE NOT NULL,
    reports_analyzed INTEGER DEFAULT 0,
    total_selected INTEGER DEFAULT 0,
    analysis_text TEXT NOT NULL,
    created_by UUID REFERENCES auth.users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table for saved staff recognition reports  
CREATE TABLE IF NOT EXISTS saved_staff_recognition (
    id BIGSERIAL PRIMARY KEY,
    week_ending_date DATE NOT NULL,
    ascend_recognition JSONB, -- Store ASCEND recognition details
    north_recognition JSONB,  -- Store NORTH recognition details
    recognition_text TEXT,    -- Formatted recognition report
    created_by UUID REFERENCES auth.users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes for efficient querying
CREATE INDEX IF NOT EXISTS idx_saved_duty_analyses_week ON saved_duty_analyses(week_ending_date);
CREATE INDEX IF NOT EXISTS idx_saved_duty_analyses_creator ON saved_duty_analyses(created_by);
CREATE INDEX IF NOT EXISTS idx_saved_duty_analyses_created ON saved_duty_analyses(created_at);

CREATE INDEX IF NOT EXISTS idx_saved_staff_recognition_week ON saved_staff_recognition(week_ending_date);
CREATE INDEX IF NOT EXISTS idx_saved_staff_recognition_creator ON saved_staff_recognition(created_by);
CREATE INDEX IF NOT EXISTS idx_saved_staff_recognition_created ON saved_staff_recognition(created_at);

-- Unique constraints to prevent duplicate saves for same week (allow overwrite via upsert)
CREATE UNIQUE INDEX IF NOT EXISTS idx_duty_analyses_unique_week_creator 
ON saved_duty_analyses(week_ending_date, created_by, report_type);

CREATE UNIQUE INDEX IF NOT EXISTS idx_staff_recognition_unique_week_creator 
ON saved_staff_recognition(week_ending_date, created_by);

-- RLS (Row Level Security) policies
ALTER TABLE saved_duty_analyses ENABLE ROW LEVEL SECURITY;
ALTER TABLE saved_staff_recognition ENABLE ROW LEVEL SECURITY;

-- Drop existing policies to avoid conflicts, then recreate them
DROP POLICY IF EXISTS "Allow authenticated users to read saved duty analyses" ON saved_duty_analyses;
DROP POLICY IF EXISTS "Allow authenticated users to insert/update their own duty analyses" ON saved_duty_analyses;
DROP POLICY IF EXISTS "Allow authenticated users to read saved staff recognition" ON saved_staff_recognition;
DROP POLICY IF EXISTS "Allow authenticated users to insert/update their own staff recognition" ON saved_staff_recognition;

-- Policies for duty analyses
CREATE POLICY "Allow authenticated users to read saved duty analyses" 
ON saved_duty_analyses FOR SELECT 
TO authenticated 
USING (true);

CREATE POLICY "Allow authenticated users to insert/update their own duty analyses" 
ON saved_duty_analyses FOR ALL 
TO authenticated 
USING (auth.uid() = created_by OR created_by IS NULL)
WITH CHECK (auth.uid() = created_by OR created_by IS NULL);

-- Policies for staff recognition
CREATE POLICY "Allow authenticated users to read saved staff recognition" 
ON saved_staff_recognition FOR SELECT 
TO authenticated 
USING (true);

CREATE POLICY "Allow authenticated users to insert/update their own staff recognition" 
ON saved_staff_recognition FOR ALL 
TO authenticated 
USING (auth.uid() = created_by OR created_by IS NULL)
WITH CHECK (auth.uid() = created_by OR created_by IS NULL);

-- Comments for documentation
COMMENT ON TABLE saved_duty_analyses IS 'Stores saved weekly duty report analyses for historical access and reporting';
COMMENT ON COLUMN saved_duty_analyses.week_ending_date IS 'Week ending date this analysis covers';
COMMENT ON COLUMN saved_duty_analyses.report_type IS 'Type of analysis: weekly_summary or standard_analysis';
COMMENT ON COLUMN saved_duty_analyses.date_range_start IS 'Start date of the analysis period';
COMMENT ON COLUMN saved_duty_analyses.date_range_end IS 'End date of the analysis period';
COMMENT ON COLUMN saved_duty_analyses.reports_analyzed IS 'Number of duty reports analyzed';
COMMENT ON COLUMN saved_duty_analyses.analysis_text IS 'Complete analysis text generated by AI';

COMMENT ON TABLE saved_staff_recognition IS 'Stores saved weekly staff recognition reports';
COMMENT ON COLUMN saved_staff_recognition.week_ending_date IS 'Week ending date this recognition covers';
COMMENT ON COLUMN saved_staff_recognition.ascend_recognition IS 'JSON object with ASCEND recognition details';
COMMENT ON COLUMN saved_staff_recognition.north_recognition IS 'JSON object with NORTH recognition details';
COMMENT ON COLUMN saved_staff_recognition.recognition_text IS 'Formatted recognition report text';

-- Example queries for common use cases:

-- 1. Get all saved duty analyses for a specific week
-- SELECT * FROM saved_duty_analyses 
-- WHERE week_ending_date = '2025-01-15' 
-- ORDER BY created_at DESC;

-- 2. Get recent staff recognition reports
-- SELECT week_ending_date, ascend_recognition, north_recognition, created_at
-- FROM saved_staff_recognition 
-- WHERE created_at >= CURRENT_DATE - INTERVAL '3 months'
-- ORDER BY week_ending_date DESC;

-- 3. Get duty analyses by creator
-- SELECT week_ending_date, report_type, reports_analyzed, created_at
-- FROM saved_duty_analyses 
-- WHERE created_by = 'user-uuid'
-- ORDER BY week_ending_date DESC;